# fastlane_require 'dotenv'
# fastlane_require 'spaceship'
# fastlane_require 'time'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  # git_pull
  # ENV['MAILGUN_SANDBOX_POSTMASTER'] = 'issenn@sandboxc3b6b7d6022b484eabc7c39f728536a5.mailgun.org'
  # ENV['MAILGUN_APIKEY'] = '5d21a2e0cce1996b200d8f991d72856d-a4502f89-ce938adb'
  # ENV['FIR_APP_TOKEN'] = '9611b6a99d280463039cbb64b7eb24ca'
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_number
  ENV['VERSIONCODE'] ||= get_info_plist_value(key: "CFBundleVersion")
  # puts get_build_number
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md', # Specify path to CHANGELOG.md
    section_identifier: '[Unreleased]', # Specify what section to read
    excluded_markdown_elements: ['-', '###']  # Specify which markdown elements should be excluded
  )
end

before_each do |lane, options|
  # ...
end

lane :do_appfile_init do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build(),
      Actions::BindParamBuilder.new(:fetch_app_identifier).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_apple_id).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_team_name).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_itc_team_name).default_value(true).build()
    ]
  )
  bind_params = []
  app_identifier = nil
  if options[:fetch_app_identifier] == true
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    bind_params.push(Actions::BindParamBuilder.new("App identifier").lane_context(:APPFILE_APP_IDENTIFIER).default_value(app_identifier).required().build())
  end
  if options[:fetch_apple_id] == true
    bind_params.push(Actions::BindParamBuilder.new("Apple ID").lane_context(:APPFILE_APPLE_ID).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)).build())
  end
  if options[:fetch_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("Team name").lane_context(:APPFILE_TEAM_NAME).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:team_name)).build())
  end
  if options[:fetch_itc_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("iTunes Connect Team name").lane_context(:APPFILE_ITC_TEAM_NAME).default_value(CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name)).build())
  end
  user_validation(bind_params: bind_params)
  if app_identifier != Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    project_info = get_project_info(xcodeproj: options[:xcodeproj])
    update_app_identifier(
      app_identifier: Actions.lane_context[:APPFILE_APP_IDENTIFIER],
      xcodeproj: project_info[:xcodeproj],
      plist_path: project_info[:info_plist]
    )
  end
  app_file_data = ""
  if app_identifier = Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    app_file_data += "app_identifier \"#{app_identifier}\" # The bundle identifier of your app\n"
  end
  if apple_id = Actions.lane_context[:APPFILE_APPLE_ID]
    app_file_data += "apple_id \"#{apple_id}\" # Your Apple email address\n"
  end
  if team_name = Actions.lane_context[:APPFILE_TEAM_NAME]
    app_file_data += "team_name \"#{team_name}\"\n"
  end
  if itc_team_name = Actions.lane_context[:APPFILE_ITC_TEAM_NAME]
    app_file_data += "itc_team_name \"#{itc_team_name}\"\n"
  end
  File.open("Appfile", "w") { |file|
    file.puts(app_file_data)
  }
end

lane :do_update_cocoapods do |lane, options|
  if files_matching(pattern: "Podfile") != nil
    cocoapods(
      repo_update: true,
      silent: false,
      verbose: true,
      use_bundle_exec: true,
      podfile: './Podfile',
      try_repo_update_on_error: true,
      error_callback: lambda { |result|
        cocoapods(
          repo_update: true,
          silent: false,
          verbose: true,
          use_bundle_exec: true,
          podfile: './Podfile'
        )
      }
    )
  end
end

lane :do_run_tests do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:test_scheme).env_var("TEST_SCHEME").ci_required().build(),
      Actions::BindParamBuilder.new(:xcworkspace).env_var("XCWORKSPACE").build(),
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build()
    ]
  )
  do_update_cocoapods
  scan(
    workspace: options[:xcworkspace],
    project: options[:xcodeproj],
    scheme: options[:test_scheme],
    clean: true
  )
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |lane, options|
  do_publish
end

lane :do_publish do |lane, options|
  do_update_cocoapods
  match
  ENV['DELIVER_IPA_PATH']=gym(
    export_options: {
      compileBitcode: true,
      stripSwiftSymbols: true,
      uploadBitcode: false,
      uploadSymbols: false,
      thinning: "<thin-for-all-variants>",
      iCloudContainerEnvironment: "Production"
    }
  )
  upload_symbols_to_crashlytics()
  do_upload_firim
end

lane :do_upload_firim do |lane, options|
  begin
    change_log = "[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    firim(
      app_version: ENV['VERSIONNAME'],
      app_build_version: ENV['VERSIONCODE'],
      app_changelog: change_log
    )
    # send_e_mail(
    #   stmp_server: "smtp.exmail.qq.com",
    #   user_name: "update@hellotalk.com",
    #   password: "Hello123",
    #   subject: "default",
    #   message_body: "Hi! @issenn \r\n A new app upload success \r\n#{ENV['CHANGELOG']}"
    # )
    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      # raise ex
      puts ex
    end
  end
end

lane :do_lookup_cert_id do |lane, options|
  require 'spaceship'
  Spaceship.login('issenn@hellotalk.com')
  Spaceship.select_team
  Spaceship.certificate.all.each do |cert|
    cert_type = Spaceship::Portal::Certificate::CERTIFICATE_TYPE_IDS[cert.type_display_id].to_s.split("::")[-1]
    puts "Cert id: #{cert.id}, name: #{cert.name}, expires: #{cert.expires.strftime("%Y-%m-%d")}, type: #{cert_type}"
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
